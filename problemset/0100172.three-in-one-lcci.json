{
  "data": {
    "question": {
      "questionId": "100172",
      "questionFrontendId": "面试题 03.01",
      "boundTopicId": 46167,
      "title": "Three in One LCCI",
      "titleSlug": "three-in-one-lcci",
      "content": "<p>Describe how you could use a single array to implement three stacks.</p>\r\n\r\n<p>Yout should implement&nbsp;<code>push(stackNum, value)</code>、<code>pop(stackNum)</code>、<code>isEmpty(stackNum)</code>、<code>peek(stackNum)</code>&nbsp;methods.&nbsp;<code>stackNum<font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">&nbsp;</font></code><font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">is the index of the stack.&nbsp;</font><code>value</code>&nbsp;is the value that pushed to the stack.</p>\r\n\r\n<p>The constructor requires a&nbsp;<code>stackSize</code>&nbsp;parameter, which represents the size of each stack.</p>\r\n\r\n<p><strong>Example1:</strong></p>\r\n\r\n<pre>\r\n<strong> Input</strong>: \r\n[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;isEmpty&quot;]\r\n[[1], [0, 1], [0, 2], [0], [0], [0], [0]]\r\n<strong> Output</strong>: \r\n[null, null, null, 1, -1, -1, true]\r\n<b>Explanation</b>: When the stack is empty, `pop, peek` return -1. When the stack is full, `push` does nothing.\r\n</pre>\r\n\r\n<p><strong>Example2:</strong></p>\r\n\r\n<pre>\r\n<strong> Input</strong>: \r\n[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;peek&quot;]\r\n[[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]\r\n<strong> Output</strong>: \r\n[null, null, null, null, 2, 1, -1, -1]\r\n</pre>\r\n",
      "translatedTitle": "三合一",
      "translatedContent": "<p>三合一。描述如何只用一个数组来实现三个栈。</p>\n\n<p>你应该实现<code>push(stackNum, value)</code>、<code>pop(stackNum)</code>、<code>isEmpty(stackNum)</code>、<code>peek(stackNum)</code>方法。<code>stackNum</code>表示栈下标，<code>value</code>表示压入的值。</p>\n\n<p>构造函数会传入一个<code>stackSize</code>参数，代表每个栈的大小。</p>\n\n<p><strong>示例1:</strong></p>\n\n<pre><strong> 输入</strong>：\n[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;isEmpty&quot;]\n[[1], [0, 1], [0, 2], [0], [0], [0], [0]]\n<strong> 输出</strong>：\n[null, null, null, 1, -1, -1, true]\n<strong>说明</strong>：当栈为空时`pop, peek`返回-1，当栈满时`push`不压入元素。\n</pre>\n\n<p><strong>示例2:</strong></p>\n\n<pre><strong> 输入</strong>：\n[&quot;TripleInOne&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;pop&quot;, &quot;peek&quot;]\n[[2], [0, 1], [0, 2], [0, 3], [0], [0], [0], [0]]\n<strong> 输出</strong>：\n[null, null, null, null, 2, 1, -1, -1]\n</pre>\n",
      "isPaidOnly": false,
      "difficulty": "Easy",
      "likes": 17,
      "dislikes": 0,
      "isLiked": null,
      "similarQuestions": "[]",
      "contributors": [],
      "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false, \"typescript\": false}",
      "topicTags": [
        {
          "name": "Design",
          "slug": "design",
          "translatedName": "设计",
          "__typename": "TopicTagNode"
        }
      ],
      "companyTagStats": null,
      "codeSnippets": [
        {
          "lang": "C++",
          "langSlug": "cpp",
          "code": "class TripleInOne {\r\npublic:\r\n    TripleInOne(int stackSize) {\r\n\r\n    }\r\n    \r\n    void push(int stackNum, int value) {\r\n\r\n    }\r\n    \r\n    int pop(int stackNum) {\r\n\r\n    }\r\n    \r\n    int peek(int stackNum) {\r\n\r\n    }\r\n    \r\n    bool isEmpty(int stackNum) {\r\n\r\n    }\r\n};\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * TripleInOne* obj = new TripleInOne(stackSize);\r\n * obj->push(stackNum,value);\r\n * int param_2 = obj->pop(stackNum);\r\n * int param_3 = obj->peek(stackNum);\r\n * bool param_4 = obj->isEmpty(stackNum);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Java",
          "langSlug": "java",
          "code": "class TripleInOne {\r\n\r\n    public TripleInOne(int stackSize) {\r\n\r\n    }\r\n    \r\n    public void push(int stackNum, int value) {\r\n\r\n    }\r\n    \r\n    public int pop(int stackNum) {\r\n\r\n    }\r\n    \r\n    public int peek(int stackNum) {\r\n\r\n    }\r\n    \r\n    public boolean isEmpty(int stackNum) {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * TripleInOne obj = new TripleInOne(stackSize);\r\n * obj.push(stackNum,value);\r\n * int param_2 = obj.pop(stackNum);\r\n * int param_3 = obj.peek(stackNum);\r\n * boolean param_4 = obj.isEmpty(stackNum);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Python",
          "langSlug": "python",
          "code": "class TripleInOne(object):\r\n\r\n    def __init__(self, stackSize):\r\n        \"\"\"\r\n        :type stackSize: int\r\n        \"\"\"\r\n\r\n\r\n    def push(self, stackNum, value):\r\n        \"\"\"\r\n        :type stackNum: int\r\n        :type value: int\r\n        :rtype: None\r\n        \"\"\"\r\n\r\n\r\n    def pop(self, stackNum):\r\n        \"\"\"\r\n        :type stackNum: int\r\n        :rtype: int\r\n        \"\"\"\r\n\r\n\r\n    def peek(self, stackNum):\r\n        \"\"\"\r\n        :type stackNum: int\r\n        :rtype: int\r\n        \"\"\"\r\n\r\n\r\n    def isEmpty(self, stackNum):\r\n        \"\"\"\r\n        :type stackNum: int\r\n        :rtype: bool\r\n        \"\"\"\r\n\r\n\r\n\r\n# Your TripleInOne object will be instantiated and called as such:\r\n# obj = TripleInOne(stackSize)\r\n# obj.push(stackNum,value)\r\n# param_2 = obj.pop(stackNum)\r\n# param_3 = obj.peek(stackNum)\r\n# param_4 = obj.isEmpty(stackNum)",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Python3",
          "langSlug": "python3",
          "code": "class TripleInOne:\r\n\r\n    def __init__(self, stackSize: int):\r\n\r\n\r\n    def push(self, stackNum: int, value: int) -> None:\r\n\r\n\r\n    def pop(self, stackNum: int) -> int:\r\n\r\n\r\n    def peek(self, stackNum: int) -> int:\r\n\r\n\r\n    def isEmpty(self, stackNum: int) -> bool:\r\n\r\n\r\n\r\n# Your TripleInOne object will be instantiated and called as such:\r\n# obj = TripleInOne(stackSize)\r\n# obj.push(stackNum,value)\r\n# param_2 = obj.pop(stackNum)\r\n# param_3 = obj.peek(stackNum)\r\n# param_4 = obj.isEmpty(stackNum)",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "C",
          "langSlug": "c",
          "code": "\r\n\r\n\r\ntypedef struct {\r\n\r\n} TripleInOne;\r\n\r\n\r\nTripleInOne* tripleInOneCreate(int stackSize) {\r\n\r\n}\r\n\r\nvoid tripleInOnePush(TripleInOne* obj, int stackNum, int value) {\r\n\r\n}\r\n\r\nint tripleInOnePop(TripleInOne* obj, int stackNum) {\r\n\r\n}\r\n\r\nint tripleInOnePeek(TripleInOne* obj, int stackNum) {\r\n\r\n}\r\n\r\nbool tripleInOneIsEmpty(TripleInOne* obj, int stackNum) {\r\n\r\n}\r\n\r\nvoid tripleInOneFree(TripleInOne* obj) {\r\n\r\n}\r\n\r\n/**\r\n * Your TripleInOne struct will be instantiated and called as such:\r\n * TripleInOne* obj = tripleInOneCreate(stackSize);\r\n * tripleInOnePush(obj, stackNum, value);\r\n \r\n * int param_2 = tripleInOnePop(obj, stackNum);\r\n \r\n * int param_3 = tripleInOnePeek(obj, stackNum);\r\n \r\n * bool param_4 = tripleInOneIsEmpty(obj, stackNum);\r\n \r\n * tripleInOneFree(obj);\r\n*/",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "C#",
          "langSlug": "csharp",
          "code": "public class TripleInOne {\r\n\r\n    public TripleInOne(int stackSize) {\r\n\r\n    }\r\n    \r\n    public void Push(int stackNum, int value) {\r\n\r\n    }\r\n    \r\n    public int Pop(int stackNum) {\r\n\r\n    }\r\n    \r\n    public int Peek(int stackNum) {\r\n\r\n    }\r\n    \r\n    public bool IsEmpty(int stackNum) {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * TripleInOne obj = new TripleInOne(stackSize);\r\n * obj.Push(stackNum,value);\r\n * int param_2 = obj.Pop(stackNum);\r\n * int param_3 = obj.Peek(stackNum);\r\n * bool param_4 = obj.IsEmpty(stackNum);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "JavaScript",
          "langSlug": "javascript",
          "code": "/**\r\n * @param {number} stackSize\r\n */\r\nvar TripleInOne = function(stackSize) {\r\n\r\n};\r\n\r\n/** \r\n * @param {number} stackNum \r\n * @param {number} value\r\n * @return {void}\r\n */\r\nTripleInOne.prototype.push = function(stackNum, value) {\r\n\r\n};\r\n\r\n/** \r\n * @param {number} stackNum\r\n * @return {number}\r\n */\r\nTripleInOne.prototype.pop = function(stackNum) {\r\n\r\n};\r\n\r\n/** \r\n * @param {number} stackNum\r\n * @return {number}\r\n */\r\nTripleInOne.prototype.peek = function(stackNum) {\r\n\r\n};\r\n\r\n/** \r\n * @param {number} stackNum\r\n * @return {boolean}\r\n */\r\nTripleInOne.prototype.isEmpty = function(stackNum) {\r\n\r\n};\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * var obj = new TripleInOne(stackSize)\r\n * obj.push(stackNum,value)\r\n * var param_2 = obj.pop(stackNum)\r\n * var param_3 = obj.peek(stackNum)\r\n * var param_4 = obj.isEmpty(stackNum)\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Ruby",
          "langSlug": "ruby",
          "code": "class TripleInOne\r\n\r\n=begin\r\n    :type stack_size: Integer\r\n=end\r\n    def initialize(stack_size)\r\n\r\n    end\r\n\r\n\r\n=begin\r\n    :type stack_num: Integer\r\n    :type value: Integer\r\n    :rtype: Void\r\n=end\r\n    def push(stack_num, value)\r\n\r\n    end\r\n\r\n\r\n=begin\r\n    :type stack_num: Integer\r\n    :rtype: Integer\r\n=end\r\n    def pop(stack_num)\r\n\r\n    end\r\n\r\n\r\n=begin\r\n    :type stack_num: Integer\r\n    :rtype: Integer\r\n=end\r\n    def peek(stack_num)\r\n\r\n    end\r\n\r\n\r\n=begin\r\n    :type stack_num: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def is_empty(stack_num)\r\n\r\n    end\r\n\r\n\r\nend\r\n\r\n# Your TripleInOne object will be instantiated and called as such:\r\n# obj = TripleInOne.new(stack_size)\r\n# obj.push(stack_num, value)\r\n# param_2 = obj.pop(stack_num)\r\n# param_3 = obj.peek(stack_num)\r\n# param_4 = obj.is_empty(stack_num)",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Swift",
          "langSlug": "swift",
          "code": "\r\nclass TripleInOne {\r\n\r\n    init(_ stackSize: Int) {\r\n\r\n    }\r\n    \r\n    func push(_ stackNum: Int, _ value: Int) {\r\n\r\n    }\r\n    \r\n    func pop(_ stackNum: Int) -> Int {\r\n\r\n    }\r\n    \r\n    func peek(_ stackNum: Int) -> Int {\r\n\r\n    }\r\n    \r\n    func isEmpty(_ stackNum: Int) -> Bool {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * let obj = TripleInOne(stackSize)\r\n * obj.push(stackNum, value)\r\n * let ret_2: Int = obj.pop(stackNum)\r\n * let ret_3: Int = obj.peek(stackNum)\r\n * let ret_4: Bool = obj.isEmpty(stackNum)\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Go",
          "langSlug": "golang",
          "code": "type TripleInOne struct {\r\n\r\n}\r\n\r\n\r\nfunc Constructor(stackSize int) TripleInOne {\r\n\r\n}\r\n\r\n\r\nfunc (this *TripleInOne) Push(stackNum int, value int)  {\r\n\r\n}\r\n\r\n\r\nfunc (this *TripleInOne) Pop(stackNum int) int {\r\n\r\n}\r\n\r\n\r\nfunc (this *TripleInOne) Peek(stackNum int) int {\r\n\r\n}\r\n\r\n\r\nfunc (this *TripleInOne) IsEmpty(stackNum int) bool {\r\n\r\n}\r\n\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * obj := Constructor(stackSize);\r\n * obj.Push(stackNum,value);\r\n * param_2 := obj.Pop(stackNum);\r\n * param_3 := obj.Peek(stackNum);\r\n * param_4 := obj.IsEmpty(stackNum);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Scala",
          "langSlug": "scala",
          "code": "class TripleInOne(_stackSize: Int) {\r\n\r\n    def push(stackNum: Int, value: Int) {\r\n\r\n    }\r\n\r\n    def pop(stackNum: Int): Int = {\r\n\r\n    }\r\n\r\n    def peek(stackNum: Int): Int = {\r\n\r\n    }\r\n\r\n    def isEmpty(stackNum: Int): Boolean = {\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * var obj = new TripleInOne(stackSize)\r\n * obj.push(stackNum,value)\r\n * var param_2 = obj.pop(stackNum)\r\n * var param_3 = obj.peek(stackNum)\r\n * var param_4 = obj.isEmpty(stackNum)\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Kotlin",
          "langSlug": "kotlin",
          "code": "class TripleInOne(stackSize: Int) {\r\n\r\n    fun push(stackNum: Int, value: Int) {\r\n\r\n    }\r\n\r\n    fun pop(stackNum: Int): Int {\r\n\r\n    }\r\n\r\n    fun peek(stackNum: Int): Int {\r\n\r\n    }\r\n\r\n    fun isEmpty(stackNum: Int): Boolean {\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * var obj = TripleInOne(stackSize)\r\n * obj.push(stackNum,value)\r\n * var param_2 = obj.pop(stackNum)\r\n * var param_3 = obj.peek(stackNum)\r\n * var param_4 = obj.isEmpty(stackNum)\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Rust",
          "langSlug": "rust",
          "code": "struct TripleInOne {\r\n\r\n}\r\n\r\n\r\n/**\r\n * `&self` means the method takes an immutable reference.\r\n * If you need a mutable reference, change it to `&mut self` instead.\r\n */\r\nimpl TripleInOne {\r\n\r\n    fn new(stackSize: i32) -> Self {\r\n\r\n    }\r\n    \r\n    fn push(&self, stack_num: i32, value: i32) {\r\n\r\n    }\r\n    \r\n    fn pop(&self, stack_num: i32) -> i32 {\r\n\r\n    }\r\n    \r\n    fn peek(&self, stack_num: i32) -> i32 {\r\n\r\n    }\r\n    \r\n    fn is_empty(&self, stack_num: i32) -> bool {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * let obj = TripleInOne::new(stackSize);\r\n * obj.push(stackNum, value);\r\n * let ret_2: i32 = obj.pop(stackNum);\r\n * let ret_3: i32 = obj.peek(stackNum);\r\n * let ret_4: bool = obj.is_empty(stackNum);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "PHP",
          "langSlug": "php",
          "code": "class TripleInOne {\r\n    /**\r\n     * @param Integer $stackSize\r\n     */\r\n    function __construct($stackSize) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @param Integer $stackNum\r\n     * @param Integer $value\r\n     * @return NULL\r\n     */\r\n    function push($stackNum, $value) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @param Integer $stackNum\r\n     * @return Integer\r\n     */\r\n    function pop($stackNum) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @param Integer $stackNum\r\n     * @return Integer\r\n     */\r\n    function peek($stackNum) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @param Integer $stackNum\r\n     * @return Boolean\r\n     */\r\n    function isEmpty($stackNum) {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your TripleInOne object will be instantiated and called as such:\r\n * $obj = TripleInOne($stackSize);\r\n * $obj->push($stackNum, $value);\r\n * $ret_2 = $obj->pop($stackNum);\r\n * $ret_3 = $obj->peek($stackNum);\r\n * $ret_4 = $obj->isEmpty($stackNum);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "TypeScript",
          "langSlug": "typescript",
          "code": "class TripleInOne {\n    constructor(stackSize: number) {\n\n    }\n\n    push(stackNum: number, value: number): void {\n\n    }\n\n    pop(stackNum: number): number {\n\n    }\n\n    peek(stackNum: number): number {\n\n    }\n\n    isEmpty(stackNum: number): boolean {\n\n    }\n}\n\n/**\n * Your TripleInOne object will be instantiated and called as such:\n * var obj = new TripleInOne(stackSize)\n * obj.push(stackNum,value)\n * var param_2 = obj.pop(stackNum)\n * var param_3 = obj.peek(stackNum)\n * var param_4 = obj.isEmpty(stackNum)\n */",
          "__typename": "CodeSnippetNode"
        }
      ],
      "stats": "{\"totalAccepted\": \"4.6K\", \"totalSubmission\": \"8.5K\", \"totalAcceptedRaw\": 4628, \"totalSubmissionRaw\": 8502, \"acRate\": \"54.4%\"}",
      "hints": [
        "栈只是一个数据结构，其中最近添加的元素首先被删除。你能用一个数组来模拟单个栈吗？请记住，有很多可能的解法且每个解法都有其利弊。",
        "我们可以通过将数组的前三分之一分配到第一个栈、第二个三分之一分配到第二个栈、最后的第三个三分之一分配到第三个栈，来模拟数组中的三个栈。然而，实际上某个栈可能比其他的大得多。能更灵活地分配吗？",
        "如果你想考虑灵活划分，可以移动栈。你能保证使用所有可用的容量吗？",
        "试着把数组看作是循环的，这样数组的结尾就“环绕”到了数组的开始部分。"
      ],
      "solution": null,
      "status": null,
      "sampleTestCase": "[\"TripleInOne\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"isEmpty\"]\n[[1], [0, 1], [0, 2], [0], [0], [0], [0]]",
      "metaData": "{\"classname\": \"TripleInOne\", \"maxbytesperline\": 200000, \"systemdesign\": true, \"constructor\": {\"params\": [{\"name\": \"stackSize\", \"type\": \"integer\"}]}, \"methods\": [{\"name\": \"push\", \"params\": [{\"name\": \"stackNum\", \"type\": \"integer\"}, {\"name\": \"value\", \"type\": \"integer\"}], \"return\": {\"type\": \"void\"}}, {\"name\": \"pop\", \"params\": [{\"name\": \"stackNum\", \"type\": \"integer\"}], \"return\": {\"type\": \"integer\"}}, {\"name\": \"peek\", \"params\": [{\"name\": \"stackNum\", \"type\": \"integer\"}], \"return\": {\"type\": \"integer\"}}, {\"name\": \"isEmpty\", \"params\": [{\"name\": \"stackNum\", \"type\": \"integer\"}], \"return\": {\"type\": \"boolean\"}}], \"params\": [{\"name\": \"inputs\", \"type\": \"integer[]\"}, {\"name\": \"inputs\", \"type\": \"integer[]\"}], \"return\": {\"type\": \"list<String>\", \"dealloc\": true}}",
      "judgerAvailable": true,
      "judgeType": "large",
      "mysqlSchemas": [],
      "enableRunCode": true,
      "envInfo": "{\"cpp\":[\"C++\",\"<p>\\u7248\\u672c\\uff1a<code>clang 9<\\/code> \\u91c7\\u7528\\u6700\\u65b0C++ 17\\u6807\\u51c6\\u3002<\\/p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528<code>-O1<\\/code>\\u7ea7\\u4f18\\u5316\\u3002<a href=\\\"https:\\/\\/github.com\\/google\\/sanitizers\\/wiki\\/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer<\\/a> \\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b<code>out-of-bounds<\\/code>\\u548c<code>use-after-free<\\/code>\\u9519\\u8bef\\u3002<\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002<\\/p>\"],\"java\":[\"Java\",\"<p>\\u7248\\u672c\\uff1a<code>Java SE 13<\\/code>\\u3002\\u53ef\\u4ee5\\u4f7f\\u7528Java 8\\u7684\\u7279\\u6027\\u4f8b\\u5982\\uff0clambda expressions \\u548c stream API\\u3002<\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u88ab\\u5bfc\\u5165\\u3002<\\/p>\"],\"python\":[\"Python\",\"<p>\\u7248\\u672c\\uff1a <code>Python 2.7.12<\\/code><\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982\\uff1a<a href=\\\"https:\\/\\/docs.python.org\\/2\\/library\\/array.html\\\" target=\\\"_blank\\\">array<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/2\\/library\\/bisect.html\\\" target=\\\"_blank\\\">bisect<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/2\\/library\\/collections.html\\\" target=\\\"_blank\\\">collections<\\/a>\\u3002\\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002<\\/p>\\r\\n\\r\\n<p>\\u6ce8\\u610f Python 2.7 <a href=\\\"https:\\/\\/www.python.org\\/dev\\/peps\\/pep-0373\\/\\\" target=\\\"_blank\\\">\\u5c06\\u57282020\\u5e74\\u540e\\u4e0d\\u518d\\u7ef4\\u62a4<\\/a>\\u3002 \\u5982\\u60f3\\u4f7f\\u7528\\u6700\\u65b0\\u7248\\u7684Python\\uff0c\\u8bf7\\u9009\\u62e9Python 3\\u3002<\\/p>\"],\"c\":[\"C\",\"<p>\\u7248\\u672c\\uff1a<code>GCC 8.2<\\/code>\\uff0c\\u91c7\\u7528GNU99\\u6807\\u51c6\\u3002<\\/p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528<code>-O1<\\/code>\\u7ea7\\u4f18\\u5316\\u3002 <a href=\\\"https:\\/\\/github.com\\/google\\/sanitizers\\/wiki\\/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer<\\/a>\\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b<code>out-of-bounds<\\/code>\\u548c<code>use-after-free<\\/code>\\u9519\\u8bef\\u3002<\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002<\\/p>\\r\\n\\r\\n<p>\\u5982\\u60f3\\u4f7f\\u7528\\u54c8\\u5e0c\\u8868\\u8fd0\\u7b97, \\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528 <a href=\\\"https:\\/\\/troydhanson.github.io\\/uthash\\/\\\" target=\\\"_blank\\\">uthash<\\/a>\\u3002 \\\"uthash.h\\\"\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5bfc\\u5165\\u3002\\u8bf7\\u770b\\u5982\\u4e0b\\u793a\\u4f8b:<\\/p>\\r\\n\\r\\n<p><b>1. \\u5f80\\u54c8\\u5e0c\\u8868\\u4e2d\\u6dfb\\u52a0\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a<\\/b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            \\/* we'll use this field as the key *\\/\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; \\/* makes this structure hashable *\\/\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n<\\/pre>\\r\\n<\\/p>\\r\\n\\r\\n<p><b>2. \\u5728\\u54c8\\u5e0c\\u8868\\u4e2d\\u67e5\\u627e\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a<\\/b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n<\\/pre>\\r\\n<\\/p>\\r\\n\\r\\n<p><b>3. \\u4ece\\u54c8\\u5e0c\\u8868\\u4e2d\\u5220\\u9664\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a<\\/b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n<\\/pre>\\r\\n<\\/p>\"],\"csharp\":[\"C#\",\"<p><a href=\\\"https:\\/\\/docs.microsoft.com\\/en-us\\/dotnet\\/csharp\\/whats-new\\/csharp-8\\\" target=\\\"_blank\\\">C# 8.0<\\/a><\\/p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u7f16\\u8bd1\\u65f6\\u9ed8\\u8ba4\\u5f00\\u542f\\u4e86debug\\u6807\\u8bb0(<code>\\/debug<\\/code>)\\u3002<\\/p>\"],\"javascript\":[\"JavaScript\",\"<p>\\u7248\\u672c\\uff1a<code>Node.js 14.8.0<\\/code><\\/p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u6267\\u884c\\u65f6\\u5c06\\u5e26\\u4e0a <code>--harmony<\\/code> \\u6807\\u8bb0\\u6765\\u5f00\\u542f <a href=\\\"http:\\/\\/node.green\\/\\\" target=\\\"_blank\\\">\\u65b0\\u7248ES6\\u7279\\u6027<\\/a>\\u3002<\\/p>\\r\\n\\r\\n<p><a href=\\\"https:\\/\\/lodash.com\\\" target=\\\"_blank\\\">lodash.js<\\/a> \\u5e93\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5305\\u542b\\u3002<\\/p>\"],\"ruby\":[\"Ruby\",\"<p>\\u4f7f\\u7528<code>Ruby 2.7<\\/code>\\u6267\\u884c<\\/p>\"],\"swift\":[\"Swift\",\"<p>\\u7248\\u672c\\uff1a<code>Swift 5.2.5<\\/code><\\/p>\\r\\n\\r\\n<p>\\u6211\\u4eec\\u901a\\u5e38\\u4fdd\\u8bc1\\u66f4\\u65b0\\u5230 <a href=\\\"https:\\/\\/swift.org\\/download\\/\\\" target=\\\"_blank\\\">Apple\\u653e\\u51fa\\u7684\\u6700\\u65b0\\u7248Swift<\\/a>\\u3002\\u5982\\u679c\\u60a8\\u53d1\\u73b0Swift\\u4e0d\\u662f\\u6700\\u65b0\\u7248\\u7684\\uff0c\\u8bf7\\u8054\\u7cfb\\u6211\\u4eec\\uff01\\u6211\\u4eec\\u5c06\\u5c3d\\u5feb\\u66f4\\u65b0\\u3002<\\/p>\"],\"golang\":[\"Go\",\"<p>\\u7248\\u672c\\uff1a<code>Go 1.15<\\/code><\\/p>\"],\"python3\":[\"Python3\",\"<p>\\u7248\\u672c\\uff1a<code>Python 3.8<\\/code><\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982<a href=\\\"https:\\/\\/docs.python.org\\/3\\/library\\/array.html\\\" target=\\\"_blank\\\">array<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/3\\/library\\/bisect.html\\\" target=\\\"_blank\\\">bisect<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/3\\/library\\/collections.html\\\" target=\\\"_blank\\\">collections<\\/a>\\u3002 \\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002<\\/p>\"],\"scala\":[\"Scala\",\"<p>\\u7248\\u672c\\uff1a<code>Scala 2.13<\\/code><\\/p>\"],\"kotlin\":[\"Kotlin\",\"<p>\\u7248\\u672c\\uff1a<code>Kotlin 1.3.10<\\/code><\\/p>\"],\"rust\":[\"Rust\",\"<p>\\u7248\\u672c\\uff1a<code>rust 1.46.0<\\/code><\\/p>\\r\\n\\r\\n<p>\\u652f\\u6301 crates.io \\u7684 <a href=\\\"https:\\/\\/crates.io\\/crates\\/rand\\\" target=\\\"_blank\\\">rand<\\/a><\\/p>\"],\"php\":[\"PHP\",\"<p>Run with <code>PHP 7.2<\\/code>.<\\/p>\"],\"typescript\":[\"TypeScript\",\"TypeScript 3.8\\r\\n\\r\\nCompile Options: --strict --target ES6\"]}",
      "book": {
        "id": "2",
        "bookName": "《程序员面试金典（第 6 版）》",
        "pressName": "图灵公司",
        "source": "《程序员面试金典（第 6 版）》独家授权",
        "shortDescription": "英文版：Cracking the Coding Interview，源自硅谷程序员的面试红宝书",
        "fullDescription": "本书是原谷歌资深面试官的经验之作，帮助了许多想要加入脸书、苹果、谷歌等 IT 名企的求职者拿到 Dream offer。本专题的 100+ 编程面试题是在原书基础上精心挑选出来的，帮助你轻松应战 IT 名企技术面试。",
        "bookImgUrl": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/30/book_2.jpg",
        "pressImgUrl": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/11/logo20190828-02.png",
        "productUrl": "",
        "__typename": "CategoryInfoNode"
      },
      "isSubscribed": false,
      "isDailyQuestion": false,
      "dailyRecordStatus": null,
      "editorType": "CKEDITOR",
      "ugcQuestionId": null,
      "style": "LEETCODE",
      "__typename": "QuestionNode"
    }
  }
}
