{
  "data": {
    "question": {
      "questionId": "100259",
      "questionFrontendId": "面试题 16.02",
      "boundTopicId": 68720,
      "title": "Words Frequency LCCI",
      "titleSlug": "words-frequency-lcci",
      "content": "<p>Design a method to find the frequency of occurrences of any given word in a book. What if we were running this algorithm multiple times?</p>\r\n\r\n<p>You should implement following methods:</p>\r\n\r\n<ul>\r\n\t<li><code>WordsFrequency(book)</code> constructor, parameter is a array of strings, representing the book.</li>\r\n\t<li><code>get(word)</code>&nbsp;get the frequency of <code>word</code> in the book.&nbsp;</li>\r\n</ul>\r\n\r\n<p><strong>Example: </strong></p>\r\n\r\n<pre>\r\nWordsFrequency wordsFrequency = new WordsFrequency({&quot;i&quot;, &quot;have&quot;, &quot;an&quot;, &quot;apple&quot;, &quot;he&quot;, &quot;have&quot;, &quot;a&quot;, &quot;pen&quot;});\r\nwordsFrequency.get(&quot;you&quot;); //returns 0，&quot;you&quot; is not in the book\r\nwordsFrequency.get(&quot;have&quot;); //returns 2，&quot;have&quot; occurs twice in the book\r\nwordsFrequency.get(&quot;an&quot;); //returns 1\r\nwordsFrequency.get(&quot;apple&quot;); //returns 1\r\nwordsFrequency.get(&quot;pen&quot;); //returns 1\r\n</pre>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>There are only lowercase letters in book[i].</code></li>\r\n\t<li><code>1 &lt;= book.length &lt;= 100000</code></li>\r\n\t<li><code>1 &lt;= book[i].length &lt;= 10</code></li>\r\n\t<li><code>get</code>&nbsp;function will not be called more than&nbsp;100000 times.</li>\r\n</ul>\r\n",
      "translatedTitle": "单词频率",
      "translatedContent": "<p>设计一个方法，找出任意指定单词在一本书中的出现频率。</p>\n\n<p>你的实现应该支持如下操作：</p>\n\n<ul>\n\t<li><code>WordsFrequency(book)</code>构造函数，参数为字符串数组构成的一本书</li>\n\t<li><code>get(word)</code>查询指定单词在书中出现的频率</li>\n</ul>\n\n<p><strong>示例：</strong></p>\n\n<pre>WordsFrequency wordsFrequency = new WordsFrequency({&quot;i&quot;, &quot;have&quot;, &quot;an&quot;, &quot;apple&quot;, &quot;he&quot;, &quot;have&quot;, &quot;a&quot;, &quot;pen&quot;});\nwordsFrequency.get(&quot;you&quot;); //返回0，&quot;you&quot;没有出现过\nwordsFrequency.get(&quot;have&quot;); //返回2，&quot;have&quot;出现2次\nwordsFrequency.get(&quot;an&quot;); //返回1\nwordsFrequency.get(&quot;apple&quot;); //返回1\nwordsFrequency.get(&quot;pen&quot;); //返回1\n</pre>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>book[i]</code>中只包含小写字母</li>\n\t<li><code>1 &lt;= book.length &lt;= 100000</code></li>\n\t<li><code>1 &lt;= book[i].length &lt;= 10</code></li>\n\t<li><code>get</code>函数的调用次数不会超过100000</li>\n</ul>\n",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": 9,
      "dislikes": 0,
      "isLiked": null,
      "similarQuestions": "[]",
      "contributors": [],
      "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false, \"typescript\": false}",
      "topicTags": [
        {
          "name": "Design",
          "slug": "design",
          "translatedName": "设计",
          "__typename": "TopicTagNode"
        },
        {
          "name": "Hash Table",
          "slug": "hash-table",
          "translatedName": "哈希表",
          "__typename": "TopicTagNode"
        }
      ],
      "companyTagStats": null,
      "codeSnippets": [
        {
          "lang": "C++",
          "langSlug": "cpp",
          "code": "class WordsFrequency {\r\npublic:\r\n    WordsFrequency(vector<string>& book) {\r\n\r\n    }\r\n    \r\n    int get(string word) {\r\n\r\n    }\r\n};\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * WordsFrequency* obj = new WordsFrequency(book);\r\n * int param_1 = obj->get(word);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Java",
          "langSlug": "java",
          "code": "class WordsFrequency {\r\n\r\n    public WordsFrequency(String[] book) {\r\n\r\n    }\r\n    \r\n    public int get(String word) {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * WordsFrequency obj = new WordsFrequency(book);\r\n * int param_1 = obj.get(word);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Python",
          "langSlug": "python",
          "code": "class WordsFrequency(object):\r\n\r\n    def __init__(self, book):\r\n        \"\"\"\r\n        :type book: List[str]\r\n        \"\"\"\r\n\r\n\r\n    def get(self, word):\r\n        \"\"\"\r\n        :type word: str\r\n        :rtype: int\r\n        \"\"\"\r\n\r\n\r\n\r\n# Your WordsFrequency object will be instantiated and called as such:\r\n# obj = WordsFrequency(book)\r\n# param_1 = obj.get(word)",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Python3",
          "langSlug": "python3",
          "code": "class WordsFrequency:\r\n\r\n    def __init__(self, book: List[str]):\r\n\r\n\r\n    def get(self, word: str) -> int:\r\n\r\n\r\n\r\n# Your WordsFrequency object will be instantiated and called as such:\r\n# obj = WordsFrequency(book)\r\n# param_1 = obj.get(word)",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "C",
          "langSlug": "c",
          "code": "\r\n\r\n\r\ntypedef struct {\r\n\r\n} WordsFrequency;\r\n\r\n\r\nWordsFrequency* wordsFrequencyCreate(char** book, int bookSize) {\r\n\r\n}\r\n\r\nint wordsFrequencyGet(WordsFrequency* obj, char* word) {\r\n\r\n}\r\n\r\nvoid wordsFrequencyFree(WordsFrequency* obj) {\r\n\r\n}\r\n\r\n/**\r\n * Your WordsFrequency struct will be instantiated and called as such:\r\n * WordsFrequency* obj = wordsFrequencyCreate(book, bookSize);\r\n * int param_1 = wordsFrequencyGet(obj, word);\r\n \r\n * wordsFrequencyFree(obj);\r\n*/",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "C#",
          "langSlug": "csharp",
          "code": "public class WordsFrequency {\r\n\r\n    public WordsFrequency(string[] book) {\r\n\r\n    }\r\n    \r\n    public int Get(string word) {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * WordsFrequency obj = new WordsFrequency(book);\r\n * int param_1 = obj.Get(word);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "JavaScript",
          "langSlug": "javascript",
          "code": "/**\r\n * @param {string[]} book\r\n */\r\nvar WordsFrequency = function(book) {\r\n\r\n};\r\n\r\n/** \r\n * @param {string} word\r\n * @return {number}\r\n */\r\nWordsFrequency.prototype.get = function(word) {\r\n\r\n};\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * var obj = new WordsFrequency(book)\r\n * var param_1 = obj.get(word)\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Ruby",
          "langSlug": "ruby",
          "code": "class WordsFrequency\r\n\r\n=begin\r\n    :type book: String[]\r\n=end\r\n    def initialize(book)\r\n\r\n    end\r\n\r\n\r\n=begin\r\n    :type word: String\r\n    :rtype: Integer\r\n=end\r\n    def get(word)\r\n\r\n    end\r\n\r\n\r\nend\r\n\r\n# Your WordsFrequency object will be instantiated and called as such:\r\n# obj = WordsFrequency.new(book)\r\n# param_1 = obj.get(word)",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Swift",
          "langSlug": "swift",
          "code": "\r\nclass WordsFrequency {\r\n\r\n    init(_ book: [String]) {\r\n\r\n    }\r\n    \r\n    func get(_ word: String) -> Int {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * let obj = WordsFrequency(book)\r\n * let ret_1: Int = obj.get(word)\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Go",
          "langSlug": "golang",
          "code": "type WordsFrequency struct {\r\n\r\n}\r\n\r\n\r\nfunc Constructor(book []string) WordsFrequency {\r\n\r\n}\r\n\r\n\r\nfunc (this *WordsFrequency) Get(word string) int {\r\n\r\n}\r\n\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * obj := Constructor(book);\r\n * param_1 := obj.Get(word);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Scala",
          "langSlug": "scala",
          "code": "class WordsFrequency(_book: Array[String]) {\r\n\r\n    def get(word: String): Int = {\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * var obj = new WordsFrequency(book)\r\n * var param_1 = obj.get(word)\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Kotlin",
          "langSlug": "kotlin",
          "code": "class WordsFrequency(book: Array<String>) {\r\n\r\n    fun get(word: String): Int {\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * var obj = WordsFrequency(book)\r\n * var param_1 = obj.get(word)\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "Rust",
          "langSlug": "rust",
          "code": "struct WordsFrequency {\r\n\r\n}\r\n\r\n\r\n/**\r\n * `&self` means the method takes an immutable reference.\r\n * If you need a mutable reference, change it to `&mut self` instead.\r\n */\r\nimpl WordsFrequency {\r\n\r\n    fn new(book: Vec<String>) -> Self {\r\n\r\n    }\r\n    \r\n    fn get(&self, word: String) -> i32 {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * let obj = WordsFrequency::new(book);\r\n * let ret_1: i32 = obj.get(word);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "PHP",
          "langSlug": "php",
          "code": "class WordsFrequency {\r\n    /**\r\n     * @param String[] $book\r\n     */\r\n    function __construct($book) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @param String $word\r\n     * @return Integer\r\n     */\r\n    function get($word) {\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Your WordsFrequency object will be instantiated and called as such:\r\n * $obj = WordsFrequency($book);\r\n * $ret_1 = $obj->get($word);\r\n */",
          "__typename": "CodeSnippetNode"
        },
        {
          "lang": "TypeScript",
          "langSlug": "typescript",
          "code": "class WordsFrequency {\n    constructor(book: string[]) {\n\n    }\n\n    get(word: string): number {\n\n    }\n}\n\n/**\n * Your WordsFrequency object will be instantiated and called as such:\n * var obj = new WordsFrequency(book)\n * var param_1 = obj.get(word)\n */",
          "__typename": "CodeSnippetNode"
        }
      ],
      "stats": "{\"totalAccepted\": \"6.6K\", \"totalSubmission\": \"8.7K\", \"totalAcceptedRaw\": 6639, \"totalSubmissionRaw\": 8664, \"acRate\": \"76.6%\"}",
      "hints": [
        "想想这个问题的最佳运行时间是多少。如果你的解法匹配最理想的运行时间，那么你可能无法做的更好了。",
        "可以使用散列表来优化重复的情况吗？"
      ],
      "solution": null,
      "status": null,
      "sampleTestCase": "[\"WordsFrequency\",\"get\",\"get\",\"get\",\"get\",\"get\"]\n[[[\"i\",\"have\",\"an\",\"apple\",\"he\",\"have\",\"a\",\"pen\"]],[\"you\"],[\"have\"],[\"an\"],[\"apple\"],[\"pen\"]]",
      "metaData": "{\"classname\": \"WordsFrequency\", \"maxbytesperline\": 200000, \"systemdesign\": true, \"constructor\": {\"params\": [{\"name\": \"book\", \"type\": \"string[]\"}]}, \"methods\": [{\"name\": \"get\", \"params\": [{\"name\": \"word\", \"type\": \"string\"}], \"return\": {\"type\": \"integer\"}}], \"params\": [{\"name\": \"inputs\", \"type\": \"integer[]\"}, {\"name\": \"inputs\", \"type\": \"integer[]\"}], \"return\": {\"type\": \"list<String>\", \"dealloc\": true}}",
      "judgerAvailable": true,
      "judgeType": "large",
      "mysqlSchemas": [],
      "enableRunCode": true,
      "envInfo": "{\"cpp\":[\"C++\",\"<p>\\u7248\\u672c\\uff1a<code>clang 9<\\/code> \\u91c7\\u7528\\u6700\\u65b0C++ 17\\u6807\\u51c6\\u3002<\\/p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528<code>-O1<\\/code>\\u7ea7\\u4f18\\u5316\\u3002<a href=\\\"https:\\/\\/github.com\\/google\\/sanitizers\\/wiki\\/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer<\\/a> \\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b<code>out-of-bounds<\\/code>\\u548c<code>use-after-free<\\/code>\\u9519\\u8bef\\u3002<\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002<\\/p>\"],\"java\":[\"Java\",\"<p>\\u7248\\u672c\\uff1a<code>Java SE 13<\\/code>\\u3002\\u53ef\\u4ee5\\u4f7f\\u7528Java 8\\u7684\\u7279\\u6027\\u4f8b\\u5982\\uff0clambda expressions \\u548c stream API\\u3002<\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u88ab\\u5bfc\\u5165\\u3002<\\/p>\"],\"python\":[\"Python\",\"<p>\\u7248\\u672c\\uff1a <code>Python 2.7.12<\\/code><\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982\\uff1a<a href=\\\"https:\\/\\/docs.python.org\\/2\\/library\\/array.html\\\" target=\\\"_blank\\\">array<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/2\\/library\\/bisect.html\\\" target=\\\"_blank\\\">bisect<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/2\\/library\\/collections.html\\\" target=\\\"_blank\\\">collections<\\/a>\\u3002\\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002<\\/p>\\r\\n\\r\\n<p>\\u6ce8\\u610f Python 2.7 <a href=\\\"https:\\/\\/www.python.org\\/dev\\/peps\\/pep-0373\\/\\\" target=\\\"_blank\\\">\\u5c06\\u57282020\\u5e74\\u540e\\u4e0d\\u518d\\u7ef4\\u62a4<\\/a>\\u3002 \\u5982\\u60f3\\u4f7f\\u7528\\u6700\\u65b0\\u7248\\u7684Python\\uff0c\\u8bf7\\u9009\\u62e9Python 3\\u3002<\\/p>\"],\"c\":[\"C\",\"<p>\\u7248\\u672c\\uff1a<code>GCC 8.2<\\/code>\\uff0c\\u91c7\\u7528GNU99\\u6807\\u51c6\\u3002<\\/p>\\r\\n\\r\\n<p>\\u7f16\\u8bd1\\u65f6\\uff0c\\u5c06\\u4f1a\\u91c7\\u7528<code>-O1<\\/code>\\u7ea7\\u4f18\\u5316\\u3002 <a href=\\\"https:\\/\\/github.com\\/google\\/sanitizers\\/wiki\\/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer<\\/a>\\u4e5f\\u88ab\\u5f00\\u542f\\u6765\\u68c0\\u6d4b<code>out-of-bounds<\\/code>\\u548c<code>use-after-free<\\/code>\\u9519\\u8bef\\u3002<\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u4f7f\\u7528\\u65b9\\u4fbf\\uff0c\\u5927\\u90e8\\u5206\\u6807\\u51c6\\u5e93\\u7684\\u5934\\u6587\\u4ef6\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8\\u5bfc\\u5165\\u3002<\\/p>\\r\\n\\r\\n<p>\\u5982\\u60f3\\u4f7f\\u7528\\u54c8\\u5e0c\\u8868\\u8fd0\\u7b97, \\u60a8\\u53ef\\u4ee5\\u4f7f\\u7528 <a href=\\\"https:\\/\\/troydhanson.github.io\\/uthash\\/\\\" target=\\\"_blank\\\">uthash<\\/a>\\u3002 \\\"uthash.h\\\"\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5bfc\\u5165\\u3002\\u8bf7\\u770b\\u5982\\u4e0b\\u793a\\u4f8b:<\\/p>\\r\\n\\r\\n<p><b>1. \\u5f80\\u54c8\\u5e0c\\u8868\\u4e2d\\u6dfb\\u52a0\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a<\\/b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            \\/* we'll use this field as the key *\\/\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; \\/* makes this structure hashable *\\/\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n<\\/pre>\\r\\n<\\/p>\\r\\n\\r\\n<p><b>2. \\u5728\\u54c8\\u5e0c\\u8868\\u4e2d\\u67e5\\u627e\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a<\\/b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n<\\/pre>\\r\\n<\\/p>\\r\\n\\r\\n<p><b>3. \\u4ece\\u54c8\\u5e0c\\u8868\\u4e2d\\u5220\\u9664\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1a<\\/b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n<\\/pre>\\r\\n<\\/p>\"],\"csharp\":[\"C#\",\"<p><a href=\\\"https:\\/\\/docs.microsoft.com\\/en-us\\/dotnet\\/csharp\\/whats-new\\/csharp-8\\\" target=\\\"_blank\\\">C# 8.0<\\/a><\\/p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u7f16\\u8bd1\\u65f6\\u9ed8\\u8ba4\\u5f00\\u542f\\u4e86debug\\u6807\\u8bb0(<code>\\/debug<\\/code>)\\u3002<\\/p>\"],\"javascript\":[\"JavaScript\",\"<p>\\u7248\\u672c\\uff1a<code>Node.js 14.8.0<\\/code><\\/p>\\r\\n\\r\\n<p>\\u60a8\\u7684\\u4ee3\\u7801\\u5728\\u6267\\u884c\\u65f6\\u5c06\\u5e26\\u4e0a <code>--harmony<\\/code> \\u6807\\u8bb0\\u6765\\u5f00\\u542f <a href=\\\"http:\\/\\/node.green\\/\\\" target=\\\"_blank\\\">\\u65b0\\u7248ES6\\u7279\\u6027<\\/a>\\u3002<\\/p>\\r\\n\\r\\n<p><a href=\\\"https:\\/\\/lodash.com\\\" target=\\\"_blank\\\">lodash.js<\\/a> \\u5e93\\u5df2\\u7ecf\\u9ed8\\u8ba4\\u88ab\\u5305\\u542b\\u3002<\\/p>\"],\"ruby\":[\"Ruby\",\"<p>\\u4f7f\\u7528<code>Ruby 2.7<\\/code>\\u6267\\u884c<\\/p>\"],\"swift\":[\"Swift\",\"<p>\\u7248\\u672c\\uff1a<code>Swift 5.2.5<\\/code><\\/p>\\r\\n\\r\\n<p>\\u6211\\u4eec\\u901a\\u5e38\\u4fdd\\u8bc1\\u66f4\\u65b0\\u5230 <a href=\\\"https:\\/\\/swift.org\\/download\\/\\\" target=\\\"_blank\\\">Apple\\u653e\\u51fa\\u7684\\u6700\\u65b0\\u7248Swift<\\/a>\\u3002\\u5982\\u679c\\u60a8\\u53d1\\u73b0Swift\\u4e0d\\u662f\\u6700\\u65b0\\u7248\\u7684\\uff0c\\u8bf7\\u8054\\u7cfb\\u6211\\u4eec\\uff01\\u6211\\u4eec\\u5c06\\u5c3d\\u5feb\\u66f4\\u65b0\\u3002<\\/p>\"],\"golang\":[\"Go\",\"<p>\\u7248\\u672c\\uff1a<code>Go 1.15<\\/code><\\/p>\"],\"python3\":[\"Python3\",\"<p>\\u7248\\u672c\\uff1a<code>Python 3.8<\\/code><\\/p>\\r\\n\\r\\n<p>\\u4e3a\\u4e86\\u65b9\\u4fbf\\u8d77\\u89c1\\uff0c\\u5927\\u90e8\\u5206\\u5e38\\u7528\\u5e93\\u5df2\\u7ecf\\u88ab\\u81ea\\u52a8 \\u5bfc\\u5165\\uff0c\\u5982<a href=\\\"https:\\/\\/docs.python.org\\/3\\/library\\/array.html\\\" target=\\\"_blank\\\">array<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/3\\/library\\/bisect.html\\\" target=\\\"_blank\\\">bisect<\\/a>, <a href=\\\"https:\\/\\/docs.python.org\\/3\\/library\\/collections.html\\\" target=\\\"_blank\\\">collections<\\/a>\\u3002 \\u5982\\u679c\\u60a8\\u9700\\u8981\\u4f7f\\u7528\\u5176\\u4ed6\\u5e93\\u51fd\\u6570\\uff0c\\u8bf7\\u81ea\\u884c\\u5bfc\\u5165\\u3002<\\/p>\"],\"scala\":[\"Scala\",\"<p>\\u7248\\u672c\\uff1a<code>Scala 2.13<\\/code><\\/p>\"],\"kotlin\":[\"Kotlin\",\"<p>\\u7248\\u672c\\uff1a<code>Kotlin 1.3.10<\\/code><\\/p>\"],\"rust\":[\"Rust\",\"<p>\\u7248\\u672c\\uff1a<code>rust 1.46.0<\\/code><\\/p>\\r\\n\\r\\n<p>\\u652f\\u6301 crates.io \\u7684 <a href=\\\"https:\\/\\/crates.io\\/crates\\/rand\\\" target=\\\"_blank\\\">rand<\\/a><\\/p>\"],\"php\":[\"PHP\",\"<p>Run with <code>PHP 7.2<\\/code>.<\\/p>\"],\"typescript\":[\"TypeScript\",\"TypeScript 3.8\\r\\n\\r\\nCompile Options: --strict --target ES6\"]}",
      "book": {
        "id": "2",
        "bookName": "《程序员面试金典（第 6 版）》",
        "pressName": "图灵公司",
        "source": "《程序员面试金典（第 6 版）》独家授权",
        "shortDescription": "英文版：Cracking the Coding Interview，源自硅谷程序员的面试红宝书",
        "fullDescription": "本书是原谷歌资深面试官的经验之作，帮助了许多想要加入脸书、苹果、谷歌等 IT 名企的求职者拿到 Dream offer。本专题的 100+ 编程面试题是在原书基础上精心挑选出来的，帮助你轻松应战 IT 名企技术面试。",
        "bookImgUrl": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/30/book_2.jpg",
        "pressImgUrl": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/11/logo20190828-02.png",
        "productUrl": "",
        "__typename": "CategoryInfoNode"
      },
      "isSubscribed": false,
      "isDailyQuestion": false,
      "dailyRecordStatus": null,
      "editorType": "CKEDITOR",
      "ugcQuestionId": null,
      "style": "LEETCODE",
      "__typename": "QuestionNode"
    }
  }
}
